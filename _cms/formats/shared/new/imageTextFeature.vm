## #macro(imageTextFeature)
#macro(textImageFeature)
## What does this do???
#set($block = $row.getChild("block").asset)

## What does this do??
#if(!$_PropertyTool.isEmpty($block))
    #set($row = $block.getStructuredDataNode("text-image-feature"))
#end

#set($style = $row.getChild("style").textValue.toLowerCase()) ## "Blue", "Teal", "Grey"

#set($imageAlignment = $row.getChild("image-alignment").textValue.toLowerCase()) ## "Left", "Right"

#set($image = $row.getChild("image").asset)

#set($imageAlt = $_EscapeTool.xml($row.getChild("image-alt").textValue))

## Is it required to reset variables when they are required in the DD, so they will always be available
#set($title = "")
#set($description = "")

#set($title = $_EscapeTool.xml($row.getChild("title").textValue))
#set($description = $_EscapeTool.xml($row.getChild("description").textValue))

## Link shared field
## this should probably be consistent across every format
## so it is easy to recognize what it is / where it's from
## ie: "sharedLink"
#set($button = $row.getChild("button"))

<div class="itf itf--${style} bg--${style} ${imageAlignment} container gx-0">
    <div class="itf_image"><img src="[system-asset]${image.path}[/system-asset]" alt="${imageAlt}"/></div>
    <div class="itf_content">
        <h2>${title}</h2>
        <p>${description}</p>
        #linkData($button)
        ## Would be easier if the values coming from linkData were named
        ## linkData_url, linkData_target
        ## instead of url, target
        <a href="${url}" target="${target}">${label}</a>
        #linkDataClear()
    </div>
</div>

#end

<style>
/*is it easier to do the following for background-colors, or should we do something like
.bg--blue as a global variable so anything can use it */

.itf--blue {
    background-color: #002D5B;
}

.itf--teal {
    background-color: #008485;
}

.itf--grey {
    background-color: #F3F3F0;
}

/*these should all be defined by selector and not component
if needed, components can have class font--lato / font--lora  */

.itf :is(a, h2) {
    font-family: Lato;
}

/*is it easier to do this or to have classes color--teal / color--gold
only issue is assigning these with backgrounds
ie: background is navy, so color needs to be gold
if statements to handle above classes versus more css
also, is an a and an h2 always going to be teal if the background is grey? no because an anchor in grey wysiwyg is black
below method might be best??? would required 3 classes: .itf .itf--grey .bg--grey  */

.itf--grey :is(a, h2) {
    color: #008485;
}

.itf--blue :is(a, h2) {
    color: #FCC200;
}

.itf--blue p {
    color: #FFF;
}

.itf--teal :is(a, h2, p) {
    color: #FFF;
}

.itf {
    margin-bottom: 40px;
    display: grid;
}

.itf_image img {
    width: 100%;
    height: 100%;
}

.itf_content {
    display: flex;
    flex-direction: column;
    padding: 30px;
    gap: 20px;
}

.itf_content p {
    margin-bottom: 20px;
}

.itf a {
    font-weight: bold;
}

@media (min-width: 992px) {
    .itf {
        grid-template-columns: 1fr 1fr;
        grid-template-areas: "image content";
    }

    .itf_image {
        grid-area: image;
    }

    .itf_content {
        grid-area: content;
    }

    .itf.right {
        grid-template-areas: "content image";
    }
}

.itf {
    margin-bottom: 40px;
    display: grid;
}

.itf_image img {
    width: 100%;
    height: 100%;
}

.itf_content {
    display: flex;
    flex-direction: column;
    padding: 30px;
    gap: 20px;
    background: #f3f3f0;
}

.itf_content p {
    margin-bottom: 20px;
}

.itf a {
    font-weight: bold;
}

.itf a,
.itf h2 {
    font-family: Lato;
    /*color: #008485;*/
}

@media (min-width: 992px) {
    .itf {
        /*     grid-template-columns: 1fr 1fr; */
        /*     grid-template-areas: "image content"; */
        display: flex;
    }

    .itf_image {
        grid-area: image;
        /*     flex: 0 0 auto; */
        flex: 1;
        width: auto;
    }

    .itf_content {
        grid-area: content;
        flex: 1 0 0;
    }

    .itf.right {
        /*     grid-template-areas: "content image"; */
        flex-direction: row-reverse;
    }
}
</style>